class Solution {
    void merge(int[] arr2, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int k = 0;
        int left = low;
        int right = mid + 1;

        // Merging the two halves
        while (left <= mid && right <= high) {
            if (arr2[left] <= arr2[right]) {
                temp[k] = arr2[left];
                left++;
            } else {
                temp[k] = arr2[right];
                right++;
            }
            k++;
        }

        // Copy remaining elements from left half, if any
        while (left <= mid) {
            temp[k] = arr2[left];
            left++;
            k++;
        }

        // Copy remaining elements from right half, if any
        while (right <= high) {
            temp[k] = arr2[right];
            right++;
            k++;
        }

        // Copy sorted elements back into the original array
        for (int i = 0; i < temp.length; i++) {
            arr2[low + i] = temp[i];
        }
    }

    public void mergesort(int[] arr, int low, int high) {
        if (low < high) {
            int mid = (low + high) / 2;
            mergesort(arr, low, mid);
            mergesort(arr, mid + 1, high);
            merge(arr, low, mid, high);
        }
    }

    public int[] sortArray(int[] nums) {
        mergesort(nums, 0, nums.length - 1);
        return nums;
    }
}
